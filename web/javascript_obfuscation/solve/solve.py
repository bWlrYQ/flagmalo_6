from base64 import b64decode
from time import sleep
from re import match
from urllib import parse
flag="Vm0wd2VFNUdWWGhVV0dSUFZsZFNXRll3Wkc5V2JHeDBaRWhrVlUxV2NEQmFWV2hyVm14S2MyTkVRbUZXVjJoeVZtcEdZV015VGtsaFJtUlRaV3RGZUZadGVGWmxSbVJJVm10a2FWSXdXbGhXYlRWRFpWWmFjbFZyWkZwV01ERTBWa2MxVDJGV1NuVlJhemxXWWxSV1JGWkdXbUZqYkZaeVdrWndWMkpXU2xsV1Z6QXhWREZrU0ZOclpHcFNWR3hZV1d4b1UwMHhWWGhYYlVacVlrZDBObGxWV2s5VWJVWTJWbGhrVjFaRmIzZFpla1poVjBaT2NscEdhR2xTTW1oWFZtMTBWMU14VWtkWFdHUllZbGhTY1ZSV1pGTk5SbFowWlVVNVZXSkZjRWhXTW5oelZqSkdjbUo2UWxwbGEzQklWbXBHVDJNeFduUmlSazVwVmpKb1dWWXhaREJoTVZaMFZtNU9WbUpIVWxsWmJGWmhWa1pTVjFwR1RteGlSbkJKV2xWVk5XRkdTWGhYYm14WFRXNW9kbFl3V21GU2JFNTBZVVprYUdFeGNHOVdWM0JIWVRKT2MxcElUbWhTTW1oeldXeG9iMkl4V25STldHUlZUVlpXTlZadE5VOWhWa3BIWTBaU1dtRXhWWGhXTVZwWFkxWkdWVkpzVWxOaVIzY3hWa1phVTFVeFdYZE5XRXBYWVd4S1lWWnJWVEZrYkZweFUydDBXRll3V2twV01uaDNZa2RGZUdOR1VsaGlSbHBvV1ZSS1QyTXhjRWxWYld4VFlYcFdWVmRYZEc5Uk1XUkhWMjVTVGxOSGFGQlZiWE40VGtaVmVHRkhPV2hpUlhCWVZqSjRUMWR0U2xWU2JGSlhUVVp3YUZwRlpFOU9iRXB6V2tkc1UySkhPVE5XTVZKUFpERkplVkpyWkZSWFIxSllXVmQ0WVdGR1duTmFSemxPVFZad2VGVnRkREJoTVVwelYyNW9WMUl6YUhKWlZscGhVbXhrYzJKR1pHbFhSVXBKVmxod1MxUXhXWGhhU0ZaVllsVmFWRmxzWkc5V1ZscEhWV3QwYVUxV1ducFdNalZUVkd4YVJsTnNhRlZXTTA0MFZGUkdVMk14WkhSa1JtUnBWbGhDU2xac1pEUmhNV1J6VjJ0YVdHRnJOVmhWYTFaaFpXeGFjMWRzVG1waVJrcDZWMnRrYzFVeVNrZGhNMlJYWWxob2NsUlZaRVpsUm1SellVWlNhVkp1UWxwWFZ6QjRUa1pzVjJKR1ZsUmlWR3hYVlcxNGQyVnNXWGxsU0dScFVqQndSMVl5TlhkWFIwVjVWV3RvVjJGcmNFeFZNVnBIWTIxS1IxcEdUazVOYldoMlZtcEdZVmxYUlhoYVJXUlZZbXR3V1ZsclZrdFhSbXh6VjJ0MFYxWnNjREJaTUZVMVlVZEtWMWRyYUZkTmFsWk1WbTB4Um1WV1ZuTmFSbFpYWWtoQmVsWkdWbUZXYlZaWVZXdG9VMkpHV25CVmFrWkxVMFphY1ZOcVVtbE5WbXd6VkZaV2IxWnNXa1pUYkdoV1lURmFhRnBYZUdGalZrcDBaRWR3VGxkRlNraFdSRVpoWVRKR1YxTnNiRkpXUlhCWVdXeG9iMk5zVWxaV1dHaFRUVlp3V2xsVldsTmhWa2w2WVVaU1dGWXpVbWhhUkVaYVpVWldjMXBHYUdoTk1VcFdWbGN4TkdReFRsZFZiR1JYWWxoU2IxbHNWbmRXTVZwMFkwZEdXRkl3VmpSWk1GcHZWakZKZW1GRmVGZGlSbkJvV1hwS1IxSXlSa2hpUms1cFlUQndXbFp0ZEdGWlZteFhZa1prV0ZkSGFGZFpiWE14WTBaV2NWTnFVbGRTYkd3elZqSjBNRmRHV25OalJteGhWbGRSZDFaSGVFdFdWbHB5WVVaa1RtSnNTbmxXTVZwaFV6RktjMVJ1VGxoaVNFSndWVzE0ZG1Wc1dsaGpSV1JXVFZac05WVnRkR0ZaVmtwMFZXczVWMkZyV2t4Vk1uaHJZekZhYzFkck9WZGlWa28yVm1wS2QxbFdWWGxTYms1cVVteHdXRmxyV25kTk1WcFdWMjVPVDJKRmNIcFhhMlIzWVZaYVZWWnJhRmRTTTJob1dWUkdXbVZHVG5OYVIyeHNZVEJ3V1ZkWGRHRlRNVTVIWWtaV1VsWkZXbFJVVmxwaFRWWmFXR1ZGT1doV01Ga3lWbTE0YzFkR1duUlZWRUpZVm14d1lWcFZXbXRYVm5CSVVteE9VMkV6UWxwV2ExcGhZakZGZUZwRlpGaGlhelZYV1ZSS1UxZEdVbGRYYm1Sc1ZteEtlbFl5Tld0WFIwcFdWbXBTVjJKSGFIWldha3BIWTJ4a2NtVkdaR2xYUjJoNVZtMTRZVk15VFhoYVNFcFBWako0Y0ZacVNtOVdNVnAwWlVaT1ZFMXNXakJXYlhSclYwZEtjbU5GT1ZkaVZFVXdWbXRhYzJOc1pISmtSbWhUWWtWd1YxWlVTWGRPVmxwelUyNVNWbUpIYUZsWlZFWkxWa1phY1ZGWWFGTldiSEI2V1ZWYWEyRldaRWhoUkZwWVZteHdhRlY2U2s1bFZsSnlZa1pXYVZJeFNuZFdWekV3WkRGa1YxZHVVazVXUmtwWVdXeGFZVk5XVm5Sa1NFNVhWakJ3U0Zrd1dsTlhiRnBHVGxWU1ZrMVdjR2hhUlZWNFVsWktjMVpyTlZkaWEwcGFWbTF3UjJJeVVYaFdibEpVWVRKb1YxbHNaRzlYUm14ellVYzVXRkpzU25sV01qVkxZVEF4V0ZWcVFsWmlXR2gyVm1wQmVGTldSbkpoUm1SVFVsWndiMWRXVWtkV2JWWkhZMFZhV0dKR1NtOVVWM2hMVjFaYWRHUkdaR3RoZWtaSVZqSjRWMVV5UmpaaVNFWmFWMGhDU0ZZd1dscGxWMDQyVW14b1UyRXpRbGxYVkVKaFdWWlplVkp1U2xSaWEzQmhXVmQwWVZVeGNGWlhiWFJyVm1zMWVsbFZaSE5WTURGV1kwUlNWMkV4Y0doWFZscE9aVVp3UjFwSGFFNU5iRXBhVjFkNFYxbFhUa2RXYmxKc1UwZFNXRmxyV21GTlJsSnpXa1JDVjAxRVJubFpNRlp6VjJ4YVdHRkVUbGRoYTFwTVZXMTRhMlJIUmtkWGJXeFhVbFp3VWxac1kzaE9SbXhZVkZob1YySnNTbkJWYlhNeFlqRlNWVkZyZEZWaVJuQXdXa1ZrUjFkc1duTmpSRUpYWWxoU2RsWnNaRXRUUmxaelYyeHdhRTFZUW05V2FrSmhZekpPYzFkdVNtdFNiVkpQVm0xMGQxZFdXbkZUYWxKclRWWktlbFl5TlU5aGJFcFlaVWRvVjJKR2NETldWVnBoWTJ4d1JtUkdaRTVXTVVvMlZqSjBZV1F4VW5OVGJsWlNZa2Q0V0Zsc2FGTmhSbVJYVjJ0MGFrMVlRa3BWTW5oRFZqSktjbE5zYkZkV00yaFlWakp6ZUZJeGNFZGlSM0JUVmpGS1dGWkdXbXRWTVU1WFYydG9hMUl6VWxsVmFrSjNWMnhzVmxkdE9WZE5hMVkwVmpJeGIxWlhSWGhqUjJoYVRWWndURmw2UmxOak1VNXlUbFprVjFKV1ZqTldiVEYzVXpBeFIySkdhRk5oTVhCUFZUQmtOR0l4Vm5SbFNHUllVbTE0V1ZremNFZFZNVXB6VjFSS1ZtSlVWbEJaVnpGTFVqSk9SMk5HY0ZkV01VbDZWbTF3UzFNeFRsZFNibEpUWWtkb1dGUlVSa3RpTVZwWlkwVjBWRTFWYkRSWGEyaFhWbGRLU0dGR2FGWmlSbkF6VmpGYVlWZEhUa1pQVjJ4T1ZtNUNTVlp0ZUc5ak1WSnpWMjVTVm1KSGFHRldNR2hEVTBaWmQxZHRSbXRTTVZwSFZERmFhMVJzV2xsUmJVWlhWbTFTTmxwVldscGxWazV6WWtaYWFWSXlhR2hXUm1SM1VqRmtSMVp1UmxOaVIxSnhWRmQwWVZOV2EzZFhhemxZVW10d1Yxa3dVazlXTWtwSVZWUkNWMVpGV2t0YVZscGhZMnh3UjJGSGJHaGxiRm95Vm14U1ExWnJNVmRYV0docFUwVTFXVmxzVm1GWFZsWjBaVWhrVGxKdGRETldNakV3VmpBeFYySkVUbHBOUmxwMlZtMXplR1JXVmxsYVJtaFhZa2hDYjFkWWNFZFpWbVJZVW10a1dHSlhlRlJVVmxaM1UxWlplV1ZIUm1oTlZtdzBWVEkxUzFReFduUmhSemxXWVd0dk1GWnJXbk5qYkhCRlVXczVVMkpJUVhkWGExWnJVakpHUmsxWVNrNVdSa3BZVkZkd1YxWkdXbkZUYTNSVFRXczFTRlZYZUd0aFZtUklZVWM1VjJKWWFHaFpla1poVmpGT2RWTnRkRk5pUm5CVlYxZDBiMUV3TlZkWGJsSk9Va1ZhVlZSWGRIZFRSbFY1VGxVNVYxSXdjRWxhVldSSFZsWmFWMk5IYUZWV1JWcG9WVEJrVjFKdFVrZGFSbVJPVTBWS1NWWnRNSGhPUjBWNVVteGtWRmRIZUc5VmExcDNWMFpzVlZKcmRGUlNiVkpZVmpKME1HRXhTbkpPV0d4WFlsaG9jbGxXV2t0amJVNUpXa1prVjJWclZqTlhhMUpIVlRGSmVGcElTbUZTYldod1ZXMDFRMlZzV2xoalJVcE9WakZhZWxZeWVHOWlSa28yWWtoQ1ZtSllVak5XYlhoaFpFVXhSVlpzYUdsV1Zsa3dWMVJDYTFJeFdsZFhiazVxVWpKb1YxbFhkR0ZOTVZWNFYyNWtVMDFXU2pCWmExcHJZVlpPUmxOcmNGZGlXRkpvVjFaYVdtVkdXbGxoUm1oWVVqSm9iMVpYZUd0aU1rMTRWbTVTYTFKWVVsbFZiVEUwVm14V2RFMVZaR2xTTUhCSVZUSTFkMVl3TVhWVVZFWmFWak5PTkZacVJtdGtWMHBIWTBVMVUySkdXVEJXYlRGM1VqRnNWMU51VG1GVFJWcFlXV3RrVTJJeFVsZGhSVTVzVm14d1NWcEZaRWRXYXpGelUydG9WazFxVmxoV2JHUkxVMFpXZEU5V2NHaE5XRUY2Vm0xd1IxbFhVa2hVYTFwUVZtdHdUMWxyV25kWFZscHpXa1JTYUUxV2JEVlZNalZUVm0xS1NHRkdhRnBpUjJoUFdsVmFZV1JIVmtkYVIzUlRUVVJSZVZaWE1IaGlNVlYzVFZWa1dGWkZXbGxaYTFwaFpHeHdSVkpzY0d4U2F6VXhWbGQ0WVdGSFJqWldiR3hZVmpOb1ZGVnFSbXRTTVdSMVVteE9hRTB4U25oV2JURTBaREpXYzFwSVNsaGlWR3hYVkZWU1EwNVdiRlpYYTNSWFRXdHdWbFZzYUd0V01rWnlZMFU1WVZKRlJYaFdha1ozVWpGa2RHSkhhR3hpUm5CYVZtcEdZVlV4U1hsVldHeFZZVEpTV0ZsdGN6RldNV3hWVTJ4T2FrMVdXakJhVldocllrZEtTR1ZHWkZwV1ZsVXhWbXBHV21ReVRrZGFSbVJPWW0xb01sWnRjRXRUTVdSWFVtNU9hRkp0VW5CVmFrWkxWRlphV0dORlpGVk5helV3Vm0xMGExZEhTbGhoUlRsWFlsUkJNVlJ0ZUdGa1JURlZWV3h3VjJKRldUQldha28wWVRGYVNGTnVTbXBTYTBwWVdWZDBkMlJzYkhGU2JFNVlVbFJXV0ZVeWN6RlZNa3BKVVdwV1YyRnJiRFJVVldSSFkyc3hWMXBIY0ZOU1ZYQlpWMWQ0YjJJeVJrZFhhMVpUWWxWYWNWUldaRk5sYkZwMFpVZDBWV0pGYkRSVmJHaHJWakpGZUZkdGFGaFdiVkpRV1hwR2EyUldXbk5WYld4WVVqSm9WbFl4WkRCV01sRjRXa2hPWVZORmNGaFphMXAzVkRGYWNWRnRSbGhTYkZZMVdsVmFhMVpyTVhKalJFSmFWbFp3ZGxZeU1VWmxWbFoxVjIxR1YwMHlhRzlXVkVKV1pVWmFjMk5GYUdwU01uaFVXVzEwU2sxR1duUmxSM1JQVW14c05WVnRlR3RXUjBwSFYyeG9XbUV5VW5aV01WcHpZMnhrZFZwR1pFNVdhM0JaVm1wSmVGSXhXWGROVm1SVVltNUNZVmxVU2xObGJGcFZVbTEwVTAxVk5YcFphMXByVmpBd2VXRkliRmRTYkZwWFZGWmFTbVZHY0VsVGJVWlRUVVp3VlZaWGVGZGtNVmw0V2tab2JGSnRVbkpVVmxaelRrWmFXR1ZIZEdoU2EzQlpWbGQ0YjFaV1duUlZiRkpXVFZad00xWnRlR0ZXVmxwellVZHNVMkpVYURWV2JHTjNUVlpKZUZkc1pGaGlhelZ4VlcxMFMxbFdjRmhrUjBaWVVtMTBOVlJXVlRWVk1rWTJWbXhvV0dFeGNISldWRVpoWkVVNVNWcEdaR2xYUjJoVlZsZHdTMUp0VVhkT1ZscGhVbXh3Y0ZsclZuZFdWbVJZVFZod1RsWnRVa2haYTFwdllrWkpkMWRzYUZWV2JIQjZWRlJHYTJOc1ZuTlViR1JPVWtWYVlWWldaRFJpTVZsNVUydGtWR0V5YUZoWlYzUmhZVVpyZVdONlJsZE5helZJV1RCa2IxUnNXbk5XYWxKWFRWWndXRmxVUmtwa01EVlpWR3hTYVdKR2NIaFdWekI0VlRGYVIySklUbGhoTTBKeldXdGFkMDFHVWxaaFJ6bFhUVVJHV0Zrd2FITldWbHB6WTBod1YxWjZSa3hWTUZwWFl6SktSMWR0YUdobGJGbDVWbTE0WVZsV2JGaFZhMmhXWVRKb1ZGbHJhRU5YUm14VlZHdE9UbFpzY0ZkV01uaExZVEF4VmxOc1RsWlNiRVl6VlVaRk9WQlJQVDA9"
look_flag=True
while(look_flag):
    try:
        flag=b64decode(flag)
        if(match(r'^[A-Za-z0-9/+]+([=]+)?$', flag.decode("utf-8"))):
            continue
        else:
            look_flag=False
    except Exception:
        look_flag=False
flag=flag.decode('utf-8')
print(flag)
for i in range(2):
    flag = parse.unquote(flag)
print(flag)
flag = flag.replace("\"", "").replace("[","").replace("]","").split(",")
res = "FMCTF{"
for i in flag:
    res+=chr(int(i))
print(res+"}")